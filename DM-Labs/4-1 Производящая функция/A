#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
 
using namespace std;
 
int n, m;
vector <long long> p, q, qr, ans;
const long long ml = 998244353;
 
 
int main()
{
    cin >> n >> m;
    n++;
    m++;
    p.resize(n);
    q.resize(m);
    for (int i = 0; i < n; i++)
        cin >> p[i];
    for (int i = 0; i < m; i++)
        cin >> q[i];
    cout << max(max(n, m) - 1, 0) << endl;
    for (int i = 0; i < max(n, m) ; i++)
    {
        long long x = 0, y = 0;
        if (i < n)
            x = p[i] % ml;
        if (i < m)
            y = q[i] % ml;
        cout << (x + y) % ml << ' ';
    }
    cout << endl;
    cout << max(n + m - 2, 0) << endl;
    for (int i = 0; i < n + m; i++)
    {
        int s = 0;
        for (int j = 0; j <= i; j++)
        {
            long long x = 0, y = 0;
            if (i - j < m)
                y = q[i - j] % ml;
            if (j < n)
                x = p[j] % ml;
            s = (s + (x * y) % ml) % ml;
        }
    ans.push_back(((s + ml)% ml));
    }
    while (!ans[ans.size() - 1]) ans.pop_back();
    for(int i = 0; i < ans.size(); i++) {
        cout << ans[i] << ' ';
    }
    qr.push_back(1);
    for (int i = 1; i <= 1000; i++)
    {
        long long s = 0;
        for (int k = 1; k <= i; k++)
        {
            long long x = 0;
            if (k < m)
                x = q[k] % ml;
            s = (s + (x * qr[i - k]) % ml) % ml;
        }
        qr.push_back(-s);
    }
    cout << endl;
    ans.resize(0);
    for (int i = 0; i <= 1000 + n; i++)
    {
        int s = 0;
        for (int j = 0; j <= i; j++)
        {
            long long x = 0, y = 0;
            if (i - j < 1000)
                y = qr[i - j] % ml;
            if (j < n)
                x = p[j] % ml;
            s = (s + (x * y) % ml) % ml;
        }
        ans.push_back(((s + ml)% ml));
    }
    while (!ans[ans.size() - 1]) ans.pop_back();
    for(int i = 0; i < 1000; i++) {
        cout << ans[i] << ' ';
    }
    return 0;
}
