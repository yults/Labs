#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>

using namespace std;

struct e
{
    long long u, v;
};
vector<bool> vis;
vector<vector<e> > E;
void dfs(long long u)
{
    if (vis[u]) return;
    vis[u] = true;
    for (long long i = 0; i < E[u].size(); i++)
        dfs(E[u][i].u);
}

int main()
{
    long long n, m, s;
    cin >> n >> m >> s;
    s--;
    E.resize(n);
    vis.resize(n);
    vector<long long> dst(n, 1000000000000001);
    dst[s] = 0;
    for (long long i = 0; i < m; i++)
    {
        long long u, v, z;
        cin >> u >> v >> z;
        u--; v--;
        E[u].push_back({v, z});
    }
    for (long long i = 0; i < n; i++)
    {
        bool f = true;
        for (long long j = 0; j < n; j++)
            for (long long q = 0; q < E[j].size(); q++)
            {
                long long u = E[j][q].u;
                long long v = E[j][q].v;
                if (dst[j] < 1000000000000001 && dst[u] - v > dst[j])
                {
                    f = false;
                    dst[u] = dst[j] + v;
                }
            }
        if (f) break;
    }
    for (long long i = 0; i < n; i++)
        for (long long q = 0; q < E[i].size(); q++)
            {
                long long u = E[i][q].u;
                long long v = E[i][q].v;
                if (dst[i] < 1000000000000001 && dst[u] - v > dst[i] && ! vis[i])
                {
                    dfs(i);
                }
            }
    for (long long i = 0; i < n; i++)
        if (dst[i] == 1000000000000001) cout << "*" << endl;
            else if (vis[i]) cout << "-" << endl;
                else cout << dst[i] << endl;
    return 0;
}
